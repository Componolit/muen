--
--  Copyright (C) 2013-2016  Reto Buerki <reet@codelabs.ch>
--  Copyright (C) 2013-2016  Adrian-Ken Rueegsegger <ken@codelabs.ch>
--
--  This program is free software: you can redistribute it and/or modify
--  it under the terms of the GNU General Public License as published by
--  the Free Software Foundation, either version 3 of the License, or
--  (at your option) any later version.
--
--  This program is distributed in the hope that it will be useful,
--  but WITHOUT ANY WARRANTY; without even the implied warranty of
--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
--  GNU General Public License for more details.
--
--  You should have received a copy of the GNU General Public License
--  along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

with System;

with Skp.Kernel;

with SK.Constants;

package body SK.CPU_Global
with
   Refined_State => (State => (Per_CPU_Storage, Global_Current_Major_Frame))
is

   use type Skp.Scheduling.Major_Frame_Array;
   use type Skp.Scheduling.Major_Frame_Range;
   use type Skp.Scheduling.Minor_Frame_Range;
   use type Skp.Scheduling.Scheduling_Group_Array;

   --  Record used to store per-CPU global data.
   type Storage_Type is record
      Scheduling_Groups   : Skp.Scheduling.Scheduling_Group_Array;
      Current_Minor_Frame : Skp.Scheduling.Minor_Frame_Range;
   end record;

   pragma Warnings (GNAT, Off, "* bits of ""Per_CPU_Storage"" unused");
   Per_CPU_Storage : Storage_Type
   with
      Address => System'To_Address (Skp.Kernel.CPU_Store_Address + 8),
      Size    => 8 * (2 * SK.Page_Size - 8);
   pragma Warnings (GNAT, On, "* bits of ""Per_CPU_Storage"" unused");

   Global_Current_Major_Frame : Skp.Scheduling.Major_Frame_Range
   with
      Linker_Section => Constants.Global_Data_Section;

   -------------------------------------------------------------------------

   procedure Init
   with
      Refined_Global => (Output => (Global_Current_Major_Frame,
                                    Per_CPU_Storage)),
      Refined_Post   =>
       Global_Current_Major_Frame = Skp.Scheduling.Major_Frame_Range'First
   is
   begin
      Global_Current_Major_Frame := Skp.Scheduling.Major_Frame_Range'First;

      Per_CPU_Storage.Scheduling_Groups
        := (others => Skp.Subject_Id_Type'First);
      Per_CPU_Storage.Current_Minor_Frame
        := Skp.Scheduling.Minor_Frame_Range'First;
   end Init;

   -------------------------------------------------------------------------

   function Is_BSP return Boolean
   is
   begin
      --  Skp.CPU_Range is auto-generated by mugenspec and contains only a
      --  single element if the system is configured for one core. GNAT finds
      --  the use of 'First on such a trivial type suspicious and warns about
      --  it.
      pragma Warnings (Off);
      return CPU_ID = Skp.CPU_Range'First;
      pragma Warnings (On);
   end Is_BSP;

   -------------------------------------------------------------------------

   procedure Set_Scheduling_Groups
     (Data : Skp.Scheduling.Scheduling_Group_Array)
   with
      Refined_Global  => (In_Out => Per_CPU_Storage),
      Refined_Depends => (Per_CPU_Storage =>+ Data),
      Refined_Post    => Per_CPU_Storage.Scheduling_Groups = Data
   is
   begin
      Per_CPU_Storage.Scheduling_Groups := Data;
   end Set_Scheduling_Groups;

end SK.CPU_Global;
